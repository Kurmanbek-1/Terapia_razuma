from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from config import Admins, DESTINATION_DIR
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from handlers import buttons


class Pay(StatesGroup):
    receipt = State()


async def receipt_test(call: types.CallbackQuery, tariff: str):
    user_id = call.message.chat.id
    await bot.send_message(user_id,
                           text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {tariff}\n"
                                "–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                "—Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏\n\n"
                                "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' —Å–Ω–∏–∑—É  ‚¨á", reply_markup=buttons.cancel_markup)
    await Pay.receipt.set()


async def exit_command(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –æ–ø–ª–∞—Ç—ã', reply_markup=None)


async def process_receipt(message: types.Message, state: FSMContext):
    user_id = message.chat.id

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button_yes = InlineKeyboardButton("–î–∞‚úÖ", callback_data="button_yes")
    button_no = InlineKeyboardButton("–ù–µ—Ç‚ùå", callback_data="button_no")
    inline_keyboard.add(button_yes, button_no)

    path = await message.photo[-1].download(
        destination_dir=DESTINATION_DIR
    )
    async with state.proxy() as data:
        data["user_id"] = user_id
        data["receipt"] = path.name
    with open(path.name, "rb") as photo:
        await bot.send_photo(chat_id=Admins[0],
                             photo=photo,
                             caption=f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –æ—Ç {user_id}",
                             reply_markup=inline_keyboard)
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!  üôåüèº\n"
                             "–≠—Ç–æ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è, –ø—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å! ‚è≥")
    await state.finish()


async def answer_yes(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.message.caption.split()[-1])

    await bot.delete_message(call.message.chat.id, call.message.message_id)

    await bot.send_message(user_id, text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ", reply_markup=None)


async def answer_no(call: types.CallbackQuery):
    user_id = int(call.message.caption.split()[-1])

    await bot.delete_message(call.message.chat.id, call.message.message_id)

    await bot.send_message(user_id, text="–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞‚ùå", reply_markup=None)


def register_pay_handler(dp: Dispatcher):
    dp.register_callback_query_handler(lambda call: receipt_test(call, "–ü—Ä–æ–±–Ω—ã–π"),
                                       lambda call: call.data == "button_1")
    dp.register_callback_query_handler(lambda call: receipt_test(call, "–ü–æ—Å–ª–µ–¥—É—é—â—è—è"),
                                       lambda call: call.data == "button_2")
    dp.register_callback_query_handler(lambda call: receipt_test(call, "–ù–∞ –º–µ—Å—è—Ü"),
                                       lambda call: call.data == "button_3")
    dp.register_callback_query_handler(lambda call: receipt_test(call, "–ù–∞ 3 –º–µ—Å—è—Ü–∞"),
                                       lambda call: call.data == "button_4")

    dp.register_message_handler(exit_command, state='*', commands='–û—Ç–º–µ–Ω–∞')
    dp.register_message_handler(exit_command, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(process_receipt, state=Pay.receipt,
                                content_types=types.ContentTypes.PHOTO)
    dp.register_callback_query_handler(answer_yes, lambda call: call.data == "button_yes")
    dp.register_callback_query_handler(answer_no, lambda call: call.data == "button_no")
